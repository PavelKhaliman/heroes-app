name: deploy

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lowercase owner
        id: vars
        shell: bash
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push app image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: app
          push: true
          tags: |
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/heroes-app:latest
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/heroes-app:${{ github.sha }}

      - name: Build and push web image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: web
          push: true
          tags: |
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/heroes-web:latest
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/heroes-web:${{ github.sha }}

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        env:
          APP_IMAGE: ghcr.io/${{ steps.vars.outputs.owner_lc }}/heroes-app:${{ github.sha }}
          WEB_IMAGE: ghcr.io/${{ steps.vars.outputs.owner_lc }}/heroes-web:${{ github.sha }}
          APP_URL: ${{ secrets.APP_URL }}
          APP_KEY: ${{ secrets.APP_KEY }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          WEB_PORT: ${{ secrets.WEB_PORT }}
          DOMAIN: ${{ secrets.DOMAIN }}
          ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          envs: APP_IMAGE,WEB_IMAGE,APP_URL,APP_KEY,DB_DATABASE,DB_USERNAME,DB_PASSWORD,WEB_PORT,DOMAIN,ACME_EMAIL
          script: |
            set -euo pipefail
            if [ -z "${DOMAIN:-}" ]; then
              echo "[deploy] DOMAIN secret is required" >&2
              exit 1
            fi

            mkdir -p /srv/heroes-app
            cd /srv/heroes-app
            if [ ! -d .git ]; then
              git init
              git remote add origin https://github.com/${{ github.repository }}.git
            fi
            git fetch --depth=1 origin ${{ github.ref_name }}
            git checkout -f FETCH_HEAD

            # sanitize secrets
            APP_KEY_SAN=$(printf "%s" "${APP_KEY:-}" | tr -d '\r' | sed -e 's/[[:space:]]*$//' -e 's/\\$//')
            DB_DATABASE_SAN=$(printf "%s" "${DB_DATABASE:-}" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
            DB_USERNAME_SAN=$(printf "%s" "${DB_USERNAME:-}" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
            DB_PASSWORD_SAN=$(printf "%s" "${DB_PASSWORD:-}" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
            APP_URL_SAN=$(printf "%s" "${APP_URL:-}" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
            WEB_PORT_SAN=${WEB_PORT:-8080}
            DOMAIN_SAN=$(printf "%s" "${DOMAIN:-}" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
            ACME_EMAIL_SAN=$(printf "%s" "${ACME_EMAIL:-}" | tr -d '\r' | sed -e 's/[[:space:]]*$//')

            # write .env atomically
            printf "%s\n" \
              "APP_IMAGE=$APP_IMAGE" \
              "WEB_IMAGE=$WEB_IMAGE" \
              "APP_URL=$APP_URL_SAN" \
              "APP_KEY=$APP_KEY_SAN" \
              "DB_DATABASE=$DB_DATABASE_SAN" \
              "DB_USERNAME=$DB_USERNAME_SAN" \
              "DB_PASSWORD=$DB_PASSWORD_SAN" \
              "WEB_PORT=$WEB_PORT_SAN" \
              "DOMAIN=$DOMAIN_SAN" \
              "ACME_EMAIL=$ACME_EMAIL_SAN" > .env

            # validate APP_KEY length (32 bytes)
            php -r '$k=getenv("APP_KEY"); if(str_starts_with($k,"base64:")){$r=base64_decode(substr($k,7),true); if(strlen($r)!==32){fwrite(STDERR,"Bad APP_KEY\n"); exit(1);} }'

            # generate Caddyfile with the actual domain to avoid empty var parsing
            mkdir -p docker/caddy
            cat > docker/caddy/Caddyfile <<CADDY
            $DOMAIN_SAN {
                encode zstd gzip
                log
                reverse_proxy web:80
            }

            www.$DOMAIN_SAN {
                redir https://$DOMAIN_SAN{uri} 308
            }

            :80 {
                respond 200 "OK"
            }
            CADDY

            docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME || github.actor }} -p ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}
            docker network inspect heroes-net >/dev/null 2>&1 || docker network create heroes-net

            docker compose --env-file .env -f docker-compose.prod.yml pull || true
            docker compose --env-file .env -f docker-compose.prod.yml up -d --force-recreate --build caddy web app

            # run migrations and rebuild caches automatically
            docker compose --env-file .env -f docker-compose.prod.yml exec -T app sh -lc '
              php artisan migrate --force &&
              php artisan config:clear && php artisan route:clear && php artisan view:clear && php artisan cache:clear &&
              php artisan config:cache && php artisan route:cache && php artisan view:cache
            '

            docker image prune -f || true
